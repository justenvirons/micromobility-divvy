---
title: "A Decade of Divvy"
subtitle: "A trip-based perspective of Chicago's<br>public bikesharing program, 2013-2023"
author: C. Scott Smith, PhD AICP
email: c.scott.smith@depaul.edu
format:
  revealjs:
    theme: "simple" 
    slide-number: true
    chalkboard: 
      buttons: false
    preview-links: auto
    smaller: true
    # logo: images/quarto.png
    # css: styles.css
    # footer: <https://quarto.org>
date: 2023-04-12
editor_options: 
  chunk_output_type: console
---

```{r}
#| label: activate packages for prep
#| include: false

library(dplyr) # data wrangling with pipe syntax
library(tidyverse) # data wrangling
library(sf) # simple features geometry data
library(plotly) # interactive plots
library(leaflet) # interactive maps
library(data.table)
library(DT)

# save(community_areas_ses,
#      trips_by_date,
#      trips_by_yearmonth,
#      trips_by_yearmonth_ca,
#      file = "data/presentation_summary_data_20230412.RData")

load(file="data/presentation_summary_data_20230412.RData")
```

## cumulative trips

```{r}
#| label: fig-cumulativetrips
#| echo: false
#| fig-cap: Cumulative Divvy Trips, 6/27/2013 to 12/31/2022
 
plot_ly(data = trips_by_date, 
        x = ~date, 
        y = ~trips_cumul,
        name = 'Trips',
        type = 'scatter', 
        mode = 'lines', 
        line = list(color = 'lightblue'),
        stackgroup = 'one', 
        hovertemplate = 'Cumulative trips: %{y:,}<extra></extra>') %>%
        layout(
      xaxis = list(title = "Date"), 
      yaxis = list(title = "Cumulative Divvy Trips"),
      legend=list(
        font = list(
          size = 10
        ),
        orientation = "h", 
        xanchor="center", 
        x = 0.5, y=-0.1),
      hovermode = "x unified")

```

## trips by month and date

::: panel-tabset
### trips by month

```{r}
#| label: fig-tripsbyyearmonth
#| echo: false
#| fig-cap: Divvy Trips by Year and Month, June 2013 through December 2022

plot_ly(data = trips_by_yearmonth,
        x = ~yearmonth,
        y = ~trips,
        type = 'bar',
        name = 'trips',
        marker = list(color = 'lightblue'),
        hovertemplate = 'Monthly trips: %{y:,}<extra></extra>') %>%
      layout(
      xaxis = list(title = ""), 
      yaxis = list(title = "Monthly Divvy Trips"),
      legend=list(
        font = list(
          size = 10
        ),
        orientation = "h", 
        xanchor="center", 
        x = 0.5, y=-0.1),
      hovermode = "x unified")

```

### trips by date
```{r}
#| label: fig-tripsbydate
#| echo: false
#| fig-cap: Divvy Trips by Day, June 2013 through December 2022

plot_ly(data = trips_by_date,
        x = ~date,
        y = ~trips,
        type = 'scatter', 
        mode = 'lines',
        line = list(color = "lightblue",
                    width = 0.5),
        name = 'trips',
        hovertemplate = 'Daily trips: %{y:,}<extra></extra>') %>%
      layout(
      xaxis = list(title = ""), 
      yaxis = list(title = "Daily Divvy Trips"),
      legend=list(
        font = list(
          size = 10
        ),
        orientation = "h", 
        xanchor="center", 
        x = 0.5, y=-0.1),
      hovermode = "x unified")

```
:::

## trips by community area

```{r}
#| label: fig-frtripsbycommunityarea
#| fig-cap: Total Divvy Trips by Community Area (Quintile Categorization)
#| echo: false

# create total trips (over study period) by community area dataset
trips_by_communityarea <- trips_by_yearmonth_ca %>%
  drop_na(yearmonth) %>%
  filter(yearmonth == max(yearmonth))

# join trips to community areas
trips_by_communityarea_ses <- community_areas_ses %>%
  left_join(trips_by_communityarea, by="comarea_id") %>%
  select(-starts_with("yearmonth"))

# create interactive map using leaflet
# color palette
map_pal <- colorQuantile(palette =  "RdYlBu", # EDIT HERE 
                   domain = trips_by_communityarea_ses$fr_trips_cumul,
                   n=5,
                   reverse=TRUE)

# hover labels
communityarea_labels <- sprintf(
  "<strong>%s</strong><br/>
  <i>Trips (from):</i> %s<br/>
  <i>Trips (to):</i> %s<br/>
  <i>Avg daily trips (from):</i> %0.1f<br/>
  <i>Avg daily trips (to):</i> %0.1f<br/>
  <i>Avg daily trips (from) per 1K pop:</i> %0.1f<br/>
  <i>Avg daily trips (to) per 1K pop:</i> %0.1f<br/>",
  trips_by_communityarea_ses$comarea_name,
  prettyNum(trips_by_communityarea_ses$fr_trips_cumul, big.mark=","),
  prettyNum(trips_by_communityarea_ses$to_trips_cumul, big.mark=","),
  trips_by_communityarea_ses$fr_trips_cumul/3441,
  trips_by_communityarea_ses$to_trips_cumul/3441,
  trips_by_communityarea_ses$fr_trips_cumul/3441/trips_by_communityarea_ses$pop_2021*1000,
  trips_by_communityarea_ses$to_trips_cumul/3441/trips_by_communityarea_ses$pop_2021*1000) %>%
lapply(htmltools::HTML)

# interactive map
leaflet(data = trips_by_communityarea_ses) %>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  addPolygons(
    fillColor = ~map_pal(fr_trips_cumul),
    label = communityarea_labels,
    weight = 2,
    opacity = 1,
    color = "white",
    dashArray = "3",
    fillOpacity = 0.7) %>%
  addLegend("bottomleft", 
            pal = map_pal, 
            values = ~fr_trips_cumul,
            title = "Divvy Trips (Quintiles)",
            opacity = 1)
```

## ridership by social vulnerability index
::: panel-tabset
### map
```{r}
#| label: fig-map_svi
#| fig-cap: Social Vulnerability Index (SVI) by Community Area (Quintile Categorization)

# create total trips (over study period) by community area dataset
trips_by_communityarea <- trips_by_yearmonth_ca %>%
  drop_na(yearmonth) %>%
  filter(yearmonth == max(yearmonth))

# join trips to community areas with ses attributes
trips_by_communityarea_ses <- community_areas_ses %>%
  left_join(trips_by_communityarea, by="comarea_id") %>%
  select(-starts_with("yearmonth"))

# Edit the following three lines with selected indicator name/title, value and ntile variables
ses_name <- "Social Vulnerability Index (SVI)" # EDIT HERE
trips_by_communityarea_ses$ses_value <- trips_by_communityarea_ses$svi_2020 # EDIT HERE
trips_by_communityarea_ses$ses_ntile <- trips_by_communityarea_ses$svi_2020_ntile_label # EDIT HERE
community_areas_ses$ses_ntile <- community_areas_ses$svi_2020_ntile_label # EDIT HERE

# create interactive map using leaflet
# color palette
map_pal <- colorQuantile(palette =  "RdYlBu", 
                   domain = trips_by_communityarea_ses$ses_value,
                   n=5,
                   reverse=TRUE)

# hover labels
communityarea_labels <- sprintf(
  paste0("<strong>%s</strong><br/>",
  ses_name,":</i> %0.1f<br/>"),
  trips_by_communityarea_ses$comarea_name,
  trips_by_communityarea_ses$ses_value) %>%
lapply(htmltools::HTML)

# interactive map
leaflet(data = trips_by_communityarea_ses) %>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  addPolygons(
    fillColor = ~map_pal(ses_value),
    label = communityarea_labels,
    weight = 2,
    opacity = 1,
    color = "white",
    dashArray = "3",
    fillOpacity = 0.7) %>%
  addLegend("bottomleft", 
            pal = map_pal, 
            values = ~ses_value, # EDIT HERE
            title = paste0(ses_name," Quintiles"),
            opacity = 1)
```


### plot
```{r}
#| label: fig-plot_svi
#| fig-cap: Divvy Trips by Social Vulnerability Index (SVI) Quintile

trips_by_yearmonth_by_ses <- trips_by_yearmonth_ca %>%
  left_join(community_areas_ses %>% st_drop_geometry(), by="comarea_id") %>%
  group_by(yearmonth, ses_ntile) %>% #
  summarise(tot_pop = sum(pop_2021),
            fr_trips = sum(fr_trips),
            to_trips = sum(to_trips),
            fr_trips_cumul = sum(fr_trips_cumul),
            to_trips_cumul = sum(to_trips_cumul),
            fr_dailytrips = fr_trips/3441,
            to_dailytrips = to_trips/3441,
            fr_trips_per1k = fr_trips/tot_pop*1000,
            to_trips_per1k = to_trips/tot_pop*1000) %>%
  drop_na(tot_pop) %>%
  mutate(order = case_when(ses_ntile == "Lowest" ~ 1,
                           ses_ntile == "Low" ~ 2,
                           ses_ntile == "Moderate" ~ 3,
                           ses_ntile == "High" ~ 4,
                           ses_ntile == "Highest" ~ 5),
         ses_label = factor(ses_ntile, levels = c("Highest", 
                                                  "High", 
                                                  "Moderate",
                                                  "Low",
                                                  "Lowest"))) %>%
  arrange(yearmonth, order)

# create a color palette
pal_quintile_colors <- c("darkred", "orange", "yellow", "lightblue","darkblue")
pal_quintile <- colorFactor(palette = pal_quintile_colors, domain = levels(trips_by_yearmonth_by_ses$ses_label), ordered = T)

plot_ly(data = trips_by_yearmonth_by_ses,
        x = ~yearmonth,
        y = ~fr_trips_per1k,
        type = 'scatter',
        mode = 'marker+line',
        color = ~ses_label,
        colors = pal_quintile_colors,
        text = ~ses_label,
        hovertemplate = '%{text}: %{y:0.1f}<extra></extra>') %>%
    config(displaylogo = FALSE) %>%
    layout(
      xaxis = list(title = ""), # EDIT HERE
      yaxis = list(title = "Divvy Trips per 1,000 Residents"),
      legend=list(
        font = list(size = 10),
        xanchor="center",
        orientation = "h", 
        x = 0.5, y=-0.1),
      hovermode = "x unified")

```

### table

```{r}
#| label: tbl-table_svi
#| tbl-cap: Summary Table of Divvy Trips (6/27/2013-12/13/2022) by Community Socioeconomic Status
#| eval: true 
#| echo: false
#| fontsize: 1.25em

trips_by_yearmonth_by_ses %>%
  group_by(ses_ntile) %>%
  summarise(order = max(order),
            tot_pop = max(tot_pop),
            fr_trips = sum(fr_trips),
            to_trips = sum(to_trips)) %>%
  mutate(tot_pop_pct = tot_pop/sum(tot_pop),
         fr_trips_pct = fr_trips/sum(fr_trips),
         to_trips_pct = to_trips/sum(to_trips)) %>%
  arrange(-order) %>%
  select(-order) %>%
  datatable(class = 'cell-border stripe',
            rownames = FALSE,
            colnames = c("SVI Quintile","Total Population","Trips (from)", "Trips (to)", "Percent of Population","Percent of Trips (from)","Percent of Trips (to)"),
            options = list(pageLength = 5, dom="t")) %>%
  formatPercentage(c("tot_pop_pct","fr_trips_pct","to_trips_pct"),digits = 1) %>%
  formatRound(c("tot_pop","fr_trips","to_trips"), mark = ",", digits = 0) %>%
  formatStyle(columns = c(1:7),fontSize = '65%')

```
:::

::: {.notes}
This composite Social Vulnerability Index ranks community areas in the city of Chicago according to four component themes: (1) socioeconomic vulnerability; (2) household composition and disability; (3) minority status and language; and (4) housing type and transportation. The index ranges from 0 (lowest vulnerability) to 1 (highest vulnerability).
:::

## ridership by neighborhood safety
::: panel-tabset
### map
```{r}
#| label: fig-map_safety
#| fig-cap: Neighborhood Safety Rate by Community Area (Quintile Categorization)

# create total trips (over study period) by community area dataset
trips_by_communityarea <- trips_by_yearmonth_ca %>%
  drop_na(yearmonth) %>%
  filter(yearmonth == max(yearmonth))

# join trips to community areas with ses attributes
trips_by_communityarea_ses <- community_areas_ses %>%
  left_join(trips_by_communityarea, by="comarea_id") %>%
  select(-starts_with("yearmonth"))

# Edit the following three lines with selected indicator name/title, value and ntile variables
ses_name <- "Neighborhood Safety" # EDIT HERE
trips_by_communityarea_ses$ses_value <- trips_by_communityarea_ses$safety_2018 # EDIT HERE
trips_by_communityarea_ses$ses_ntile <- trips_by_communityarea_ses$safety_2018_ntile_label # EDIT HERE
community_areas_ses$ses_ntile <- community_areas_ses$safety_2018_ntile_label # EDIT HERE

# create interactive map using leaflet
# color palette
map_pal <- colorQuantile(palette =  "RdYlBu", 
                   domain = trips_by_communityarea_ses$ses_value,
                   n=5,
                   reverse=FALSE)

# hover labels
communityarea_labels <- sprintf(
  paste0("<strong>%s</strong><br/>",
  ses_name,":</i> %0.1f<br/>"),
  trips_by_communityarea_ses$comarea_name,
  trips_by_communityarea_ses$ses_value) %>%
lapply(htmltools::HTML)

# interactive map
leaflet(data = trips_by_communityarea_ses) %>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  addPolygons(
    fillColor = ~map_pal(ses_value),
    label = communityarea_labels,
    weight = 2,
    opacity = 1,
    color = "white",
    dashArray = "3",
    fillOpacity = 0.7) %>%
  addLegend("bottomleft", 
            pal = map_pal, 
            values = ~ses_value, # EDIT HERE
            title = paste0(ses_name," Quintiles"),
            opacity = 1)
```

### plot
```{r}
#| label: fig-plot_safety
#| fig-cap: Divvy Trips by Neighborhood Safety Rate Quintile

trips_by_yearmonth_by_ses <- trips_by_yearmonth_ca %>%
  left_join(community_areas_ses %>% st_drop_geometry(), by="comarea_id") %>%
  group_by(yearmonth, ses_ntile) %>% #
  summarise(tot_pop = sum(pop_2021),
            fr_trips = sum(fr_trips),
            to_trips = sum(to_trips),
            fr_trips_cumul = sum(fr_trips_cumul),
            to_trips_cumul = sum(to_trips_cumul),
            fr_dailytrips = fr_trips/3441,
            to_dailytrips = to_trips/3441,
            fr_trips_per1k = fr_trips/tot_pop*1000,
            to_trips_per1k = to_trips/tot_pop*1000) %>%
  drop_na(tot_pop) %>%
  mutate(order = case_when(ses_ntile == "Lowest" ~ 1,
                           ses_ntile == "Low" ~ 2,
                           ses_ntile == "Moderate" ~ 3,
                           ses_ntile == "High" ~ 4,
                           ses_ntile == "Highest" ~ 5),
         ses_label = factor(ses_ntile, levels = c("Highest", 
                                                  "High", 
                                                  "Moderate",
                                                  "Low",
                                                  "Lowest"))) %>%
  arrange(yearmonth, order)

# create a color palette
pal_quintile_colors <- c("darkblue","lightblue","yellow", "orange","darkred")
pal_quintile <- colorFactor(palette = pal_quintile_colors, domain = levels(trips_by_yearmonth_by_ses$ses_label), ordered = T)

plot_ly(data = trips_by_yearmonth_by_ses,
        x = ~yearmonth,
        y = ~fr_trips_per1k,
        type = 'scatter',
        mode = 'marker+line',
        color = ~ses_label,
        colors = pal_quintile_colors,
        text = ~ses_label,
        hovertemplate = '%{text}: %{y:0.1f}<extra></extra>') %>%
    config(displaylogo = FALSE) %>%
    layout(
      xaxis = list(title = ""), # EDIT HERE
      yaxis = list(title = "Divvy Trips per 1,000 Residents"),
      legend=list(
        font = list(size = 10),
        xanchor="center",
        orientation = "h", 
        x = 0.5, y=-0.1),
      hovermode = "x unified")

```

### table

```{r}
#| label: tbl-table_safety
#| tbl-cap: Summary Table of Divvy Trips (6/27/2013-12/13/2022) by Community Socioeconomic Status
#| eval: true 
#| echo: false
#| fontsize: 1.25em

trips_by_yearmonth_by_ses %>%
  group_by(ses_ntile) %>%
  summarise(order = max(order),
            tot_pop = max(tot_pop),
            fr_trips = sum(fr_trips),
            to_trips = sum(to_trips)) %>%
  mutate(tot_pop_pct = tot_pop/sum(tot_pop),
         fr_trips_pct = fr_trips/sum(fr_trips),
         to_trips_pct = to_trips/sum(to_trips)) %>%
  arrange(-order) %>%
  select(-order) %>%
  datatable(class = 'cell-border stripe',
            rownames = FALSE,
            colnames = c("Neighborhood Safety Quintile","Total Population","Trips (from)", "Trips (to)", "Percent of Population","Percent of Trips (from)","Percent of Trips (to)"),
            options = list(pageLength = 5, dom="t")) %>%
  formatPercentage(c("tot_pop_pct","fr_trips_pct","to_trips_pct"),digits = 1) %>%
  formatRound(c("tot_pop","fr_trips","to_trips"), mark = ",", digits = 0) %>%
  formatStyle(columns = c(1:7),fontSize = '65%')

```
:::

::: {.notes}
Neighborhood safety rate refers to the percent of adults who report that they feel safe in their neighborhood "all of the time" or "most of the time". Data source: City of Chicago Health Atlas (Healthy Chicago Survey, 2016-2018)
:::

## ridership by poverty rate
::: panel-tabset
### map
```{r}
#| label: fig-mapsesquintile
#| fig-cap: Household Poverty Rate by Community Area (Quintile Categorization)

# create total trips (over study period) by community area dataset
trips_by_communityarea <- trips_by_yearmonth_ca %>%
  drop_na(yearmonth) %>%
  filter(yearmonth == max(yearmonth))

# join trips to community areas with ses attributes
trips_by_communityarea_ses <- community_areas_ses %>%
  left_join(trips_by_communityarea, by="comarea_id") %>%
  select(-starts_with("yearmonth"))

# Edit the following three lines with selected indicator name/title, value and ntile variables
ses_name <- "Poverty Rate" # EDIT HERE
trips_by_communityarea_ses$ses_value <- trips_by_communityarea_ses$poverty_2021 # EDIT HERE
trips_by_communityarea_ses$ses_ntile <- trips_by_communityarea_ses$poverty_2021_ntile_label # EDIT HERE
community_areas_ses$ses_ntile <- community_areas_ses$poverty_2021_ntile_label # EDIT HERE

# create interactive map using leaflet
# color palette
map_pal <- colorQuantile(palette =  "RdYlBu", 
                   domain = trips_by_communityarea_ses$ses_value,
                   n=5,
                   reverse=TRUE)

# hover labels
communityarea_labels <- sprintf(
  paste0("<strong>%s</strong><br/>",
  ses_name,":</i> %0.1f<br/>"),
  trips_by_communityarea_ses$comarea_name,
  trips_by_communityarea_ses$ses_value) %>%
lapply(htmltools::HTML)

# interactive map
leaflet(data = trips_by_communityarea_ses) %>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  addPolygons(
    fillColor = ~map_pal(ses_value),
    label = communityarea_labels,
    weight = 2,
    opacity = 1,
    color = "white",
    dashArray = "3",
    fillOpacity = 0.7) %>%
  addLegend("bottomleft", 
            pal = map_pal, 
            values = ~ses_value, # EDIT HERE
            title = paste0(ses_name," Quintiles"),
            opacity = 1)
```

### plot
```{r}
#| label: fig-plotbyses
#| fig-cap: Divvy Trips by Household Poverty Rate Quintile

trips_by_yearmonth_by_ses <- trips_by_yearmonth_ca %>%
  left_join(community_areas_ses %>% st_drop_geometry(), by="comarea_id") %>%
  group_by(yearmonth, ses_ntile) %>% #
  summarise(tot_pop = sum(pop_2021),
            fr_trips = sum(fr_trips),
            to_trips = sum(to_trips),
            fr_trips_cumul = sum(fr_trips_cumul),
            to_trips_cumul = sum(to_trips_cumul),
            fr_dailytrips = fr_trips/3441,
            to_dailytrips = to_trips/3441,
            fr_trips_per1k = fr_trips/tot_pop*1000,
            to_trips_per1k = to_trips/tot_pop*1000) %>%
  drop_na(tot_pop) %>%
  mutate(order = case_when(ses_ntile == "Lowest" ~ 1,
                           ses_ntile == "Low" ~ 2,
                           ses_ntile == "Moderate" ~ 3,
                           ses_ntile == "High" ~ 4,
                           ses_ntile == "Highest" ~ 5),
         ses_label = factor(ses_ntile, levels = c("Highest", 
                                                  "High", 
                                                  "Moderate",
                                                  "Low",
                                                  "Lowest"))) %>%
  arrange(yearmonth, order)

# create a color palette
pal_quintile_colors <- c("darkred", "orange", "yellow", "lightblue","darkblue")
pal_quintile <- colorFactor(palette = pal_quintile_colors, domain = levels(trips_by_yearmonth_by_ses$ses_label), ordered = T)

plot_ly(data = trips_by_yearmonth_by_ses,
        x = ~yearmonth,
        y = ~fr_trips_per1k,
        type = 'scatter',
        mode = 'marker+line',
        color = ~ses_label,
        colors = pal_quintile_colors,
        text = ~ses_label,
        hovertemplate = '%{text}: %{y:0.1f}<extra></extra>') %>%
    config(displaylogo = FALSE) %>%
    layout(
      xaxis = list(title = ""), # EDIT HERE
      yaxis = list(title = "Divvy Trips per 1,000 Residents"),
      legend=list(
        font = list(size = 10),
        xanchor="center",
        orientation = "h", 
        x = 0.5, y=-0.1),
      hovermode = "x unified")

```

### table

```{r}
#| label: tbl-tripsbysestable
#| tbl-cap: Summary Table of Divvy Trips (6/27/2013-12/13/2022) by Community Socioeconomic Status
#| eval: true 
#| echo: false
#| fontsize: 1.25em

trips_by_yearmonth_by_ses %>%
  group_by(ses_ntile) %>%
  summarise(order = max(order),
            tot_pop = max(tot_pop),
            fr_trips = sum(fr_trips),
            to_trips = sum(to_trips)) %>%
  mutate(tot_pop_pct = tot_pop/sum(tot_pop),
         fr_trips_pct = fr_trips/sum(fr_trips),
         to_trips_pct = to_trips/sum(to_trips)) %>%
  arrange(-order) %>%
  select(-order) %>%
  datatable(class = 'cell-border stripe',
            rownames = FALSE,
            colnames = c("Neighborhood Safety Quintile","Total Population","Trips (from)", "Trips (to)", "Percent of Population","Percent of Trips (from)","Percent of Trips (to)"),
            options = list(pageLength = 5, dom="t")) %>%
  formatPercentage(c("tot_pop_pct","fr_trips_pct","to_trips_pct"),digits = 1) %>%
  formatRound(c("tot_pop","fr_trips","to_trips"), mark = ",", digits = 0) %>%
  formatStyle(columns = c(1:7),fontSize = '65%')

```
:::

::: {.notes}
Quintiles based on the percentage of residents living in households earning below Federal Poverty Level income. American Community Survey 5-year estimates, 2017-2021.
:::

## Divvy data

+ [City of Chicago data portal](https://data.cityofchicago.org/Transportation/Divvy-Trips/fg6s-gzvg) (trips between 2013-2019)  
+ [Divvy System Data](https://divvybikes.com/system-data) web page (trips between 2020-2023)
+ [Divvy GBFS JSON feed](https://gbfs.divvybikes.com/gbfs/gbfs.json) (bike, station locations 4/11/2023) 

::: footer
A [GitHub repository](https://github.com/justenvirons/micromobility-divvy) is available with code .
:::

# Thank you! Discussion...
